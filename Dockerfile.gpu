#!filepath: Dockerfile.gpu
# Use NVIDIA's official PyTorch container for GPU support
# This image includes PyTorch optimized for NVIDIA GPUs
FROM nvcr.io/nvidia/pytorch:24.08-py3

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    OCR_USE_GPU=true \
    QARIOCR_MODEL_NAME=qariocr:latest \
    OLLAMA_BASE_URL=http://localhost:11434

# Install only essential runtime dependencies
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    libgl1 libglib2.0-0 libsm6 libxext6 libxrender1 curl openssl libssl-dev && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app
COPY requirements.txt /app/requirements.txt

# Install requirements with OpenCV compatibility fix
# First uninstall any existing OpenCV installations
RUN pip uninstall -y opencv-python opencv-python-headless opencv-contrib-python || true

# Install legacy stable OpenCV headless known to work broadly
RUN pip install --no-cache-dir opencv-python-headless==4.5.5.64

# Install requirements
RUN pip install --no-cache-dir -r /app/requirements.txt

# --- PaddleOCR (GPU) ---
# Replace the CUDA variant in the URL to match your CUDA base image if needed.
RUN pip install --no-cache-dir \
    paddleocr==2.7.* \
    paddlepaddle-gpu==2.6.* \
    -f https://www.paddlepaddle.org.cn/whl/linux/gpu.html

# Verify PyTorch compatibility
RUN python -c "import torch; print(f'PyTorch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}')"

# Copy only necessary files
COPY main.py /app/main.py

# Create model directories
RUN mkdir -p /app/easyocr_models /app/paddleocr_models

# Clean up to reduce image size
RUN apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
    # General Python cleanup
    find /usr/local/lib -name "*.pyc" -delete 2>/dev/null || true && \
    find /usr/local/lib -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    # Verify PyTorch is still working after cleanup
    python -c "import torch; print(f'PyTorch version after cleanup: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}')"

RUN useradd -m -u 10001 appuser && chown -R appuser:appuser /app
# Set up proper permissions for the Python environment
RUN if [ -d "/opt/conda" ]; then chown -R appuser:appuser /opt/conda && chmod -R 755 /opt/conda; fi

USER appuser

EXPOSE 8000
HEALTHCHECK CMD curl -f http://localhost:8000/health || exit 1

# Volume declarations for model directories
VOLUME ["/app/easyocr_models", "/app/paddleocr_models"]

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
